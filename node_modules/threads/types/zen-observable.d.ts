// Type definitions for zen-observable 0.8
// Project: https://github.com/zenparsing/zen-observable
// Definitions by: Kombu <https://github.com/aicest>
//                 JounQin <https://github.com/JounQin>
//                 Thomas <https://github.com/itomtom>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// Changes:
// - Turned the global scope declarations into a module declaration
// - Turned the CommonJS export into a default export

declare module "zen-observable" {
  interface SymbolConstructor {
    readonly observable: symbol;
  }

  export interface SubscriptionObserver<T> {
    closed: boolean;
    next(value: T): void;
    error(errorValue: any): void;
    complete(): void;
  }

  export interface Subscription {
    closed: boolean;
    unsubscribe(): void;
  }

  export interface Observer<T> {
    start?(subscription: Subscription): any;
    next?(value: T): void;
    error?(errorValue: any): void;
    complete?(): void;
  }

  export type Subscriber<T> = (observer: SubscriptionObserver<T>) => void | (() => void) | Subscription;

  export interface ObservableLike<T> {
    subscribe?: Subscriber<T>;
    [Symbol.observable](): Observable<T> | ObservableLike<T>;
  }

  class Observable<T> {
    constructor(subscriber: Subscriber<T>)

    subscribe(observer: Observer<T>): Subscription;
    subscribe(onNext: (value: T) => void, onError?: (error: any) => void, onComplete?: () => void): Subscription;

    [Symbol.observable](): Observable<T>;

    forEach(callback: (value: T) => void): Promise<void>;
    map<R>(callback: (value: T) => R): Observable<R>;
    filter(callback: (value: T) => boolean): Observable<T>;
    reduce(callback: (previousValue: T, currentValue: T) => T, initialValue?: T): Observable<T>;
    reduce<R>(callback: (previousValue: R, currentValue: T) => R, initialValue?: R): Observable<R>;
    flatMap<R>(callback: (value: T) => ObservableLike<R>): Observable<R>;
    concat<R>(...observable: Array<Observable<R>>): Observable<R>;

    static from<R>(observable: Observable<R> | ObservableLike<R> | ArrayLike<R>): Observable<R>;
    static of<R>(...items: R[]): Observable<R>;
  }

  export default Observable;
}
