import { Observable } from "../observable";
import { FunctionThread, ModuleThread, Worker as WorkerType } from "../types/master";
import { WorkerFunction, WorkerModule } from "../types/worker";
declare type ArbitraryWorkerInterface = WorkerFunction & WorkerModule<string> & {
    somekeythatisneverusedinproductioncode123: "magicmarker123";
};
declare type ArbitraryFunctionOrModuleThread = FunctionThread<any, any> & ModuleThread<any>;
declare type ExposedToThreadType<Exposed extends WorkerFunction | WorkerModule<any>> = Exposed extends ArbitraryWorkerInterface ? ArbitraryFunctionOrModuleThread : Exposed extends WorkerFunction ? FunctionThread<Parameters<Exposed>, StripAsync<ReturnType<Exposed>>> : Exposed extends WorkerModule<any> ? ModuleThread<Exposed> : never;
declare type StripAsync<Type> = Type extends Promise<infer PromiseBaseType> ? PromiseBaseType : Type extends Observable<infer ObservableBaseType> ? ObservableBaseType : Type;
export declare function spawn<Exposed extends WorkerFunction | WorkerModule<any> = ArbitraryWorkerInterface>(worker: WorkerType): Promise<ExposedToThreadType<Exposed>>;
export {};
